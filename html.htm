<!DOCTYPE html>
<html>
<head>
	<title>Felix Tumbarell</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" type="text/css" href="style.css">
</head>


<!-- -->
<!-- This styles are for the letter effects -->
<style>
	.wrapped {
		
		font-size: 2em;
		display: flex;
		flex-direction: column;		
		align-items: center;
		text-align: center;
	
}
		
		



	.dinamic {
		color: var(--colorTitle);
		
		align-content: center;
		place-content: center ;	
		position: absolute;
		text-align: center;
		/*outline: 2px solid red;*/
		width: max-content;
		text-transform: uppercase;
		z-index: 4;
		
		
	}
		.dinamic pre{
			font-family: Tahoma, sans-serif;
			letter-spacing: 0.28em;		
			text-align: center;	
			/*text-shadow: 2px 0 0 var(--color1) ;
			animation: apare 1s steps(11) 1s forwards;*/
			
			
		}

		.dinamic::before,
		.dinamic::after {
			content: " ";
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			 
		}

		.dinamic::before{
			background-color:var(--backgroundcolor);
			animation: 
				typewriter var(--animationspeed) steps(var(--typerwritersCharacters)) 1s forwards;
				
				
		}

			@keyframes typewriter {
				
					0%   {left: 0%; }
					50%   {left: 100%; }
					75%   {left: 100%; }
					100%   {left: 100%; }
					

					

				}}

				@keyframes typereverse {
				to {
					right: 100%;
					

				}}
			
				/*@keyframes apare {
					0%   { opacity:0; }
					10%  { opacity:1; }
					20% { opacity:0; }
					30% { opacity:1; }
					40% { opacity:0; }
					50% { opacity:1; }
					60% { opacity:0; }
					70% { opacity:1; }
					80% { opacity:0; }
					100% { opacity:1; }
					
				}*/
			

				
			.dinamic::after{
				width: 0.05em;
				background-color:var(--color1);
				animation: 
					typewriter var(--animationspeed) steps(var(--typerwritersCharacters)) 1s  forwards, 
					blink 750ms steps(11) infinite;
					

			}

			@keyframes blink {
				to{
					background: transparent;

				}
				
			}

			


	.static {
		position: absolute;
		z-index: 3;
		color: aliceblue;
		text-align: center;
		font-size: 2em;
		opacity:0 ;
		transform: translateY(1em);
		animation: fadein 1s 2s forwards  ;
		
	}
		@keyframes fadein {
				to{
					opacity: 1;
					transform: translateY(0);
				}
				
			}


		.static::before,
		.static::after {
			content: " ";
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			 
		}

		.static::before{
			

		}
		
		.static::after {
			
			
		}
			

		.menu{
			opacity:0 ;
			transform: translateY(1em);
			animation: fadein 1s 2.5s forwards  ;
		}



</style>


 <!--This are the header styles -->

<style>

	.dinamic{
		/*margin-top: 6em;
		margin-left: 33%;*/
		margin-top:6.2em;
		

	}

	#static{
		display: flex;
		flex-direction: column;		
		align-items: center;
		text-align: center;
		
	}

	.static{
		/*margin-top: 15em;
		margin-left: 43.3%;*/
		font-weight: 300;
		margin-top: 15em;
		
	}

			.dinamic, .static {
				
			}



	.hbuton{
		color: var(--color2) ;
		z-index: 5; 
		position: relative; 
		background-color: var(--transparentbg); 
		padding: 0em 0.1em 0em 0.1em;
		margin-bottom: ;
		border: none;
		border-color: /*0px solid var(--color1)*/ ;
		border-radius: 25%;
		font-size: 3em;
		align-content: center;
		transform: translateY(1em);
		opacity: 0;
		animation: fadein 2s 3s forwards;

	}

		.hbuton:hover{
			background-color:  ;
			color:  var(--color1)  ;
			font-size: ;
			border: none;
			transform: translateY(1em);
			
		}

		#time{
			color: var(--color1);
			font-size: 1em;
		}





</style>

<!-- todas las demas propiedades del header-->

<style>


	
</style>

<!-- propiedades de page 2-->

<style>

	.intro{
		margin-top: 16em;
		margin-left: 16em;
		margin-bottom: em;


	}
		.tit{
			
		}

	.cuad1{
		position: relative;
		width: 20%;
		height: 40%;
		background-color: var(--color1);
		left: 30%;
		margin-top: 5em;
		display: inline-block ;
		opacity:0 ;
		transform: translateY(10em);
		animation: fadein 1s 7s forwards  ;
	}
	.cuad2{
		position: relative;
		width: 20%;
		height: 40%;
		background-color: var(--color1);
		left: 40%;
		margin-top: 5em;
		display: inline-block ;
		opacity:0 ;
		transform: translateY(10em);
		animation: fadein 1s 8s forwards  ;
	}
		
</style>


<!-- BODYYYYYY -->

<body>
	



	<header>
		
		<div class="header"> 
			<div id="menu">
				<ul class="menu" style="color:var(--colorTitle) ;">
					<li><a href="html.htm">Home</a></li>
					<li>Studio</li>
					<li ><a href="contact.html"> Contact</a></li>
					<!--<li class="">Contact</li>-->
				</ul>
			</div>
			
			<div class="wrapped">
				<h1 class="dinamic" > 
					<pre class="list" type="text" id="buenas"></pre>
				</h1>
			</div>
			<div id="static">
				<h1 class="static"  >  Mi nombre es Felix </h1>
			</div>
			<canvas>
				
			</canvas>
			<div class="holder">
				<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
				<p id="time" style="position:  ;"></p>
				<button class="hbuton" style=""  >
				<a href="#page2" style="text-decoration: none;color:inherit;" onclick="show()">&#8893</a></button>
			</div>


			<!-- Header Section 
			<h2 class="subtitle">Un subtitulo</h2>
			<nav class="menu">
				<a href="#">Inicio</a>
				<a href="#">Acerca</a>
				<a href="#">Contacto</a>
			</nav> -->

		  
		</div>


	  </header>

	  	<!-- Here is  -->
		<div class="all" style="display:none ;">
			<div class="page2" id="page2" onmouseover="typed()">
					<div class="raya" style="background-color: var(--color1); height:6em; "></div>

					<div class="intro">
						<h1 class="tit">Hola</h1>
						<span id="element" style="color:var(--color1); "></span>
					</div>

					<div class="cuad1"></div>
					<div class="cuad2"></div>




			</div>
		</div>



	  
	<script src="script.js"></script>

<!-- Here is  the ball-->

	<script>

		// Initial Setup for the balls
			const canvas = document.querySelector('canvas');
			const c = canvas.getContext('2d');


			canvas.width = innerWidth;
			canvas.height = innerHeight;

						// Variables
			let mouse = {
				x: innerWidth / 2,
				y: innerHeight / 2 
			};

			let ballCount = 750;
			let balls = [];
			let gravityPos = [];
			let friction = .995;
			let explosionDistance = 5;
			let shouldExplode = false;

			const colors = [
			'#85937a',
			'#586c5c',
			'#a9af90',
			'var(--color1)'
			];

			const bgColor = '#000';


			// Event Listeners
			addEventListener("mousemove", function(event) {
				mouse.x = event.clientX;
				mouse.y = event.clientY;
				gravityPos = [mouse.x, mouse.y];
			});

			addEventListener("mouseout", function(event) {
			gravityPos = [canvas.width / 2, canvas.height / 2];
			});

			addEventListener("resize", function() {
				canvas.width = innerWidth;	
				canvas.height = innerHeight;

				init();
			});

			addEventListener("click", function() {
				init();
			});


			// Utility Functions
			function randomIntFromRange(min,max) {
				return Math.floor(Math.random() * (max - min + 1) + min);
			}

			function randomeFloatFromRange(min, max){
			return Math.random() * (max - min) + min;
			}

			function randomColor(colors) {
				return colors[Math.floor(Math.random() * colors.length)];
			}


			// Objects
			function Ball(px, py, vx, vy, f, radius, color) {
				this.p = [px, py];
				this.v = [vx, vy];
				this.gv = [0, 0];
				this.gp = 0;
				this.radius = radius;
				this.color = color;
				this.f = f;

				this.update = function() {
				// calculate gravity vector
				this.gv = [gravityPos[0] - this.p[0], gravityPos[1] - this.p[1]];
			
				// Calculate gravity intensity
				let a = gravityPos[0] - this.p[0];
				let b = gravityPos[1] - this.p[1];
				this.gp = 1 / (Math.sqrt( a*a + b*b ));   
				
				// Explode if needed
				if (shouldExplode){
				this.v[0] *= randomeFloatFromRange(-10, 10);
				this.v[1] *= randomeFloatFromRange(-10, 10);
				}
				
				// Reduce ball's own velocity with friction
				this.v[0] *= this.f;
				this.v[1] *= this.f;
				
				// Calculate new velocity, add gravity
				this.v[0] += this.gv[0] * this.gp * this.f;
				this.v[1] += this.gv[1] * this.gp * this.f;
				
				// Move
					this.p[0] += this.v[0];
					this.p[1] += this.v[1];
					this.draw();
				};

				this.draw = function() {
					c.save();
					c.beginPath();
					c.arc(this.p[0], this.p[1], this.radius, 0, Math.PI * 2, false);	
					c.fillStyle = this.color;
					c.fill();
					c.closePath();
					c.restore();
				};
			}


			// Implementation
			function init() {
				gravityPos = [canvas.width / 2, canvas.height / 2];
				balls = [];
				for(let i = 0 ; i < ballCount ; i++){
				let rd = randomeFloatFromRange(1, 2);
				let px = randomeFloatFromRange(0, canvas.width);
				let py = randomeFloatFromRange(0, canvas.height);
				let vx = randomeFloatFromRange(-10, 10);
				let vy = randomeFloatFromRange(-10, 10);
				let f = friction;
				balls.push(new Ball(px, py, vx, vy, f, rd, randomColor(colors)));
			}
			}

			// Animation Loop
			function animate() {
				requestAnimationFrame(animate);
				resetCanvas(bgColor);
				updateShouldExplode();
				for(let i = 0 ; i < balls.length ; i++){
				balls[i].update();
			}
			}

			init();
			animate();

			function resetCanvas(color){
				if(color){
				c.save();
				c.fillStyle = color;
				c.fillRect(0, 0, canvas.width, canvas.height);
				c.restore();
				}else{
				c.clearRect(0, 0, canvas.width, canvas.height);
			}
			}
			
				function updateShouldExplode(){
				let x = 0;
				let y = 0;
				for(let i = 0 ; i < balls.length ; i++){
				x += balls[i].v[0] < 0 ? balls[i].v[0] * -1 : balls[i].v[0];
				y += balls[i].v[1] < 0 ? balls[i].v[1] * -1 : balls[i].v[1];
				}
				shouldExplode = x / balls.length < explosionDistance && y / balls.length < explosionDistance;
			}
	

	</script>

<!-- Here is where hare la funcion de la hora -->

		<script>

			const hour = new Date().getHours(); 
			let greeting;
			if (8< hour < 12) {
  			greeting = "Buenos dias";
			}
			if  (12< hour < 19) {
  			greeting = "Buen Dia";
			}
			else if(19< hour < 00) {
  			greeting = "Buenas Noches";
			}
			
			document.getElementById("buenas").innerHTML = greeting;
			
  	/*			if (new Date().getHours() < 18) {
					document.getElementById("demo").innerHTML = "Good day!";
					}

*/		
			
				function ment(f) {	 					
  					return ("Hola")/*(new Date().getHours()) + (7)*/;
				
				};
	
				var mom = new Date().toLocaleTimeString();
				
				var datetime = new Date().toLocaleTimeString();
				console.log(datetime); // it will represent date in the console of developers tool
				document.getElementById("time").textContent = datetime; // represent on html page

				function refreshTime() {
				const timeDisplay = document.getElementById("time");
				const dateString = new Date().toLocaleTimeString();
				const formattedString = dateString.replace(", ", " - ");
				timeDisplay.textContent = formattedString;
}
 				setInterval(refreshTime, 1000);
				

		</script>

<!-- Page 2 anmimations 

the letters-->

		<script src="https://unpkg.com/typed.js@2.0.132/dist/typed.umd.js"></script>
		<script>
			/*
			document.getElementById("page2").addEventListener("mouseover", mouse);*/

					var typed = new Typed('#element', {
						strings: ['<i>Ya</i> nos presentamos, vayamos al lio.', '&amp; a second sentence.'],
						typeSpeed: 50,
					});
				
		</script>


	<!-- Setup and start animation! -->

		<script>
				(document).ready(function() {
					('a[href^="#page2"]').click(function() {
					var destino = (this.hash); //this.hash lee el atributo href de este
					('html, body').animate({ scrollTop: destino.offset().top }, 700); //Llega a su destino con el tiempo deseado
					return false;
				});
				});



			function show()
				{        
					document.getElementById("all").style.display="block";
				}




		</script>




	
</body>
</html>
